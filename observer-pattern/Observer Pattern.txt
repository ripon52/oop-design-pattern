Quick Description : Observer is a behavioral design pattern that lets you define a subscription mechanism to notify multiple objects about any events that happen to the object theyâ€™re observing.

Required:
1.Observer Interface , Here Observer
2.Subject Interface, Here Subject
3.Observer Class , Here UserObserver
4.Action Class , Here PostSubject

As per example.

Breakdown the cycle:

Observer class implements Observer Interface
Action class implements Subject Interface
Observer class hold's
       1. Action Classes into array
       2. Track the changes
       3. notify to the action classes via processing


Cycle Execute :

       1. Put the observer into PostSubject class via attach method
       2. Upload or change anything via PostSubject method like uploadPost()
       3. Once it's found any changes via uploadPost() it will execute the notify method to
       notify the observer object list about the changes.

Real Life Short Example :

Create instance of UserObserver and PostSubject class

$userObserver = new UserObserver();
$postSubject = new PostSubject();

// Set the observer for the PostSubject so that it can take action once new changes found.
$postSubject->attach($userObserver);

// attach() Method
public function attach(Observer $observer)
{
    $this->observers[] = $observer;
}

// upload any changes
$postSubject->uploadPost("Testing Post");

inside uploadPost method

public function uploadPost(string $postContent){
    // set the changes
    $this->post = $postContent;

    // Calling the notify
    $this->notify();
}

// Notifying to the responsible observers
public function notify()
{
    foreach ($this->observers as $observer) {
        $observer->update($this->post);
    }
}

